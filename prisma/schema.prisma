generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String
  lastName   String
  email      String   @unique
  phone      String
  password   String
  avatar     String
  birthday   String
  sex        Sex
  country    String
  city       String
  showAge    Boolean
  orders     Order[]
  cart       Cart?
  role       Role
  address    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Order {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  deliveryAddress String
  depositedAmount Int
  deliveryCost    Int
  deliveryStatus  DeliveryStatus
  totalCost       Int
  recipient       String
  paymentStatus   PaymentStatus
  productsCost    Int
  paymentMethod   PaymentMethod
  customerId      String         @db.ObjectId
  customer        User           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  products        String[]
  status          OrderStatus
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
}

model Product {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  brand             String
  country           String
  material          String[]
  size              Size?
  availableSizes    Size[]
  hight             Int?
  width             Int?
  depth             Int?
  weight            Int?
  availableQuantity Int
  color             Color
  availableColors   Color[]
  season            Season[]
  sex               Sex[]
  age               Age[]
  description       String
  type              String
  price             Int
  // orderId           String?  @db.ObjectId
  // order             Order?   @relation(fields: [orderId], references: [id])
  // cartId            String?  @db.ObjectId
  // cart              Cart?    @relation(fields: cartId, references: [id])
}

model Cart {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @unique @db.ObjectId
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products String[]
}

enum Sex {
  male
  female
  transgender
  unknown
}

enum Age {
  baby
  children
  teenager
  adult
  aged
}

enum Season {
  summer
  winter
  spring
  autumn
  demiseason
}

enum Role {
  BUYER
  SALLER
  ADMIN
}

enum Color {
  red
  blue
  green
  yellow
  orange
  purple
  pink
  brown
  gray
  black
  white
}

enum Size {
  xxs
  xs
  s
  md
  lg
  xl
  xxl
  xxxl
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
  REFUNDED
}

enum DeliveryStatus {
  PENDING
  DISPATCHED
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
}

enum OrderStatus {
  CART
  CREATED
  PROCESSING
  CONFIRMED
  PAYMENT_PENDING
  AWAITING_SHIPMENT
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELED
  REFUND_PENDING
  REFUNDED
}
